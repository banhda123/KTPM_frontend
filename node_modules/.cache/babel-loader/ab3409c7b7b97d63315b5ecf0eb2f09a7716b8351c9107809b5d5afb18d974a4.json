{"ast":null,"code":"// CartController.js - Handles business logic for cart-related operations\n\nimport CartModel from '../models/CartModel';\nimport ProductController from '../../products/controllers/ProductController';\nclass CartController {\n  // Get cart data\n  async getCart() {\n    try {\n      return await CartModel.getCart();\n    } catch (error) {\n      console.error('Error in getCart:', error);\n      throw new Error('Failed to fetch cart. Please try again later.');\n    }\n  }\n\n  // Add product to cart\n  async addToCart(productId, quantity = 1) {\n    try {\n      // First get the product details\n      const product = await ProductController.getProductById(productId);\n\n      // Check if product is in stock\n      if (!product.isInStock()) {\n        throw new Error('This product is out of stock.');\n      }\n\n      // Check if requested quantity is available\n      if (product.stock < quantity) {\n        throw new Error(`Only ${product.stock} items available.`);\n      }\n\n      // Add to cart\n      return await CartModel.addToCart(productId, quantity);\n    } catch (error) {\n      console.error(`Error in addToCart for product ${productId}:`, error);\n      throw error.message ? error : new Error('Failed to add item to cart. Please try again later.');\n    }\n  }\n\n  // Update cart item quantity\n  async updateCartItem(itemId, quantity) {\n    try {\n      // Validate quantity\n      if (quantity <= 0) {\n        return this.removeCartItem(itemId);\n      }\n      return await CartModel.updateCartItem(itemId, quantity);\n    } catch (error) {\n      console.error(`Error in updateCartItem for item ${itemId}:`, error);\n      throw new Error('Failed to update cart. Please try again later.');\n    }\n  }\n\n  // Remove item from cart\n  async removeCartItem(itemId) {\n    try {\n      return await CartModel.removeCartItem(itemId);\n    } catch (error) {\n      console.error(`Error in removeCartItem for item ${itemId}:`, error);\n      throw new Error('Failed to remove item from cart. Please try again later.');\n    }\n  }\n\n  // Clear cart\n  async clearCart() {\n    try {\n      return await CartModel.clearCart();\n    } catch (error) {\n      console.error('Error in clearCart:', error);\n      throw new Error('Failed to clear cart. Please try again later.');\n    }\n  }\n\n  // Apply promo code\n  async applyPromoCode(code) {\n    try {\n      if (!code || code.trim() === '') {\n        throw new Error('Please enter a valid promo code.');\n      }\n      return await CartModel.applyPromoCode(code);\n    } catch (error) {\n      console.error(`Error in applyPromoCode for code ${code}:`, error);\n      throw error.message ? error : new Error('Failed to apply promo code. Please try again later.');\n    }\n  }\n\n  // Calculate shipping cost\n  calculateShippingCost(subtotal, shippingMethod = 'standard') {\n    // Free shipping for orders over 500,000 VND\n    if (subtotal >= 500000) {\n      return 0;\n    }\n\n    // Different shipping costs based on method\n    switch (shippingMethod) {\n      case 'express':\n        return 50000;\n      case 'sameday':\n        return 100000;\n      case 'standard':\n      default:\n        return 30000;\n    }\n  }\n\n  // Validate cart before checkout\n  async validateCartForCheckout() {\n    try {\n      const cart = await this.getCart();\n\n      // Check if cart is empty\n      if (cart.items.length === 0) {\n        throw new Error('Your cart is empty. Please add items before checkout.');\n      }\n\n      // Check if all items are still in stock\n      const stockValidation = await Promise.all(cart.items.map(async item => {\n        const product = await ProductController.getProductById(item.productId);\n        return {\n          itemId: item.id,\n          productId: item.productId,\n          name: item.name,\n          requestedQuantity: item.quantity,\n          availableQuantity: product.stock,\n          isAvailable: product.stock >= item.quantity\n        };\n      }));\n      const unavailableItems = stockValidation.filter(item => !item.isAvailable);\n      if (unavailableItems.length > 0) {\n        throw {\n          message: 'Some items in your cart are no longer available in the requested quantity.',\n          unavailableItems\n        };\n      }\n      return {\n        valid: true,\n        cart\n      };\n    } catch (error) {\n      console.error('Error in validateCartForCheckout:', error);\n      throw error;\n    }\n  }\n}\nexport default new CartController();","map":{"version":3,"names":["CartModel","ProductController","CartController","getCart","error","console","Error","addToCart","productId","quantity","product","getProductById","isInStock","stock","message","updateCartItem","itemId","removeCartItem","clearCart","applyPromoCode","code","trim","calculateShippingCost","subtotal","shippingMethod","validateCartForCheckout","cart","items","length","stockValidation","Promise","all","map","item","id","name","requestedQuantity","availableQuantity","isAvailable","unavailableItems","filter","valid"],"sources":["D:/Kientruc/src/modules/cart/controllers/CartController.js"],"sourcesContent":["// CartController.js - Handles business logic for cart-related operations\n\nimport CartModel from '../models/CartModel';\nimport ProductController from '../../products/controllers/ProductController';\n\nclass CartController {\n  // Get cart data\n  async getCart() {\n    try {\n      return await CartModel.getCart();\n    } catch (error) {\n      console.error('Error in getCart:', error);\n      throw new Error('Failed to fetch cart. Please try again later.');\n    }\n  }\n\n  // Add product to cart\n  async addToCart(productId, quantity = 1) {\n    try {\n      // First get the product details\n      const product = await ProductController.getProductById(productId);\n      \n      // Check if product is in stock\n      if (!product.isInStock()) {\n        throw new Error('This product is out of stock.');\n      }\n      \n      // Check if requested quantity is available\n      if (product.stock < quantity) {\n        throw new Error(`Only ${product.stock} items available.`);\n      }\n      \n      // Add to cart\n      return await CartModel.addToCart(productId, quantity);\n    } catch (error) {\n      console.error(`Error in addToCart for product ${productId}:`, error);\n      throw error.message ? error : new Error('Failed to add item to cart. Please try again later.');\n    }\n  }\n\n  // Update cart item quantity\n  async updateCartItem(itemId, quantity) {\n    try {\n      // Validate quantity\n      if (quantity <= 0) {\n        return this.removeCartItem(itemId);\n      }\n      \n      return await CartModel.updateCartItem(itemId, quantity);\n    } catch (error) {\n      console.error(`Error in updateCartItem for item ${itemId}:`, error);\n      throw new Error('Failed to update cart. Please try again later.');\n    }\n  }\n\n  // Remove item from cart\n  async removeCartItem(itemId) {\n    try {\n      return await CartModel.removeCartItem(itemId);\n    } catch (error) {\n      console.error(`Error in removeCartItem for item ${itemId}:`, error);\n      throw new Error('Failed to remove item from cart. Please try again later.');\n    }\n  }\n\n  // Clear cart\n  async clearCart() {\n    try {\n      return await CartModel.clearCart();\n    } catch (error) {\n      console.error('Error in clearCart:', error);\n      throw new Error('Failed to clear cart. Please try again later.');\n    }\n  }\n\n  // Apply promo code\n  async applyPromoCode(code) {\n    try {\n      if (!code || code.trim() === '') {\n        throw new Error('Please enter a valid promo code.');\n      }\n      \n      return await CartModel.applyPromoCode(code);\n    } catch (error) {\n      console.error(`Error in applyPromoCode for code ${code}:`, error);\n      throw error.message ? error : new Error('Failed to apply promo code. Please try again later.');\n    }\n  }\n\n  // Calculate shipping cost\n  calculateShippingCost(subtotal, shippingMethod = 'standard') {\n    // Free shipping for orders over 500,000 VND\n    if (subtotal >= 500000) {\n      return 0;\n    }\n    \n    // Different shipping costs based on method\n    switch (shippingMethod) {\n      case 'express':\n        return 50000;\n      case 'sameday':\n        return 100000;\n      case 'standard':\n      default:\n        return 30000;\n    }\n  }\n\n  // Validate cart before checkout\n  async validateCartForCheckout() {\n    try {\n      const cart = await this.getCart();\n      \n      // Check if cart is empty\n      if (cart.items.length === 0) {\n        throw new Error('Your cart is empty. Please add items before checkout.');\n      }\n      \n      // Check if all items are still in stock\n      const stockValidation = await Promise.all(\n        cart.items.map(async (item) => {\n          const product = await ProductController.getProductById(item.productId);\n          return {\n            itemId: item.id,\n            productId: item.productId,\n            name: item.name,\n            requestedQuantity: item.quantity,\n            availableQuantity: product.stock,\n            isAvailable: product.stock >= item.quantity\n          };\n        })\n      );\n      \n      const unavailableItems = stockValidation.filter(item => !item.isAvailable);\n      \n      if (unavailableItems.length > 0) {\n        throw {\n          message: 'Some items in your cart are no longer available in the requested quantity.',\n          unavailableItems\n        };\n      }\n      \n      return { valid: true, cart };\n    } catch (error) {\n      console.error('Error in validateCartForCheckout:', error);\n      throw error;\n    }\n  }\n}\n\nexport default new CartController();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}