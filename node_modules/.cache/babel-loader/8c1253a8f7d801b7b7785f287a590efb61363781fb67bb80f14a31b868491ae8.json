{"ast":null,"code":"// UserModel.js - Defines the data structure for user and handles user data operations\n\nimport api from '../../../services/api';\nclass UserModel {\n  constructor(data = {}) {\n    this.id = data.id || null;\n    this.firstName = data.firstName || '';\n    this.lastName = data.lastName || '';\n    this.email = data.email || '';\n    this.phone = data.phone || '';\n    this.avatar = data.avatar || '';\n    this.role = data.role || 'customer';\n    this.addresses = data.addresses || [];\n    this.defaultAddressId = data.defaultAddressId || null;\n    this.createdAt = data.createdAt ? new Date(data.createdAt) : null;\n    this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;\n  }\n\n  // Get full name\n  getFullName() {\n    return `${this.firstName} ${this.lastName}`.trim();\n  }\n\n  // Get default address\n  getDefaultAddress() {\n    if (!this.defaultAddressId || !this.addresses.length) return null;\n    return this.addresses.find(address => address.id === this.defaultAddressId) || this.addresses[0];\n  }\n\n  // Get formatted address\n  getFormattedAddress(addressId = null) {\n    const address = addressId ? this.addresses.find(addr => addr.id === addressId) : this.getDefaultAddress();\n    if (!address) return '';\n    return [address.street, address.ward, address.district, address.city, address.country].filter(Boolean).join(', ');\n  }\n\n  // Check if user is admin\n  isAdmin() {\n    return this.role === 'admin';\n  }\n\n  // Static methods for API operations\n  static async getCurrentUser() {\n    try {\n      const response = await api.get('/users/me');\n      return new UserModel(response.data);\n    } catch (error) {\n      console.error('Error fetching current user:', error);\n      throw error;\n    }\n  }\n  static async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n\n      // Store token in localStorage\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        api.setAuthHeader(response.data.token);\n      }\n      return new UserModel(response.data.user);\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  }\n  static async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n\n      // Store token in localStorage if provided\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        api.setAuthHeader(response.data.token);\n      }\n      return new UserModel(response.data.user);\n    } catch (error) {\n      console.error('Error during registration:', error);\n      throw error;\n    }\n  }\n  static logout() {\n    localStorage.removeItem('auth_token');\n    api.removeAuthHeader();\n  }\n  static async updateProfile(userData) {\n    try {\n      const response = await api.put('/users/me', userData);\n      return new UserModel(response.data);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n  static async addAddress(addressData) {\n    try {\n      const response = await api.post('/users/me/addresses', addressData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding address:', error);\n      throw error;\n    }\n  }\n  static async updateAddress(addressId, addressData) {\n    try {\n      const response = await api.put(`/users/me/addresses/${addressId}`, addressData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating address:', error);\n      throw error;\n    }\n  }\n  static async deleteAddress(addressId) {\n    try {\n      await api.delete(`/users/me/addresses/${addressId}`);\n      return true;\n    } catch (error) {\n      console.error('Error deleting address:', error);\n      throw error;\n    }\n  }\n  static async setDefaultAddress(addressId) {\n    try {\n      const response = await api.put(`/users/me/addresses/${addressId}/default`);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting default address:', error);\n      throw error;\n    }\n  }\n  static async changePassword(currentPassword, newPassword) {\n    try {\n      await api.put('/users/me/password', {\n        currentPassword,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n  static async requestPasswordReset(email) {\n    try {\n      await api.post('/auth/forgot-password', {\n        email\n      });\n      return true;\n    } catch (error) {\n      console.error('Error requesting password reset:', error);\n      throw error;\n    }\n  }\n  static async resetPassword(token, newPassword) {\n    try {\n      await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return true;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n}\nexport default UserModel;","map":{"version":3,"names":["api","UserModel","constructor","data","id","firstName","lastName","email","phone","avatar","role","addresses","defaultAddressId","createdAt","Date","updatedAt","getFullName","trim","getDefaultAddress","length","find","address","getFormattedAddress","addressId","addr","street","ward","district","city","country","filter","Boolean","join","isAdmin","getCurrentUser","response","get","error","console","login","password","post","token","localStorage","setItem","setAuthHeader","user","register","userData","logout","removeItem","removeAuthHeader","updateProfile","put","addAddress","addressData","updateAddress","deleteAddress","delete","setDefaultAddress","changePassword","currentPassword","newPassword","requestPasswordReset","resetPassword"],"sources":["D:/Kientruc/src/modules/auth/models/UserModel.js"],"sourcesContent":["// UserModel.js - Defines the data structure for user and handles user data operations\n\nimport api from '../../../services/api';\n\nclass UserModel {\n  constructor(data = {}) {\n    this.id = data.id || null;\n    this.firstName = data.firstName || '';\n    this.lastName = data.lastName || '';\n    this.email = data.email || '';\n    this.phone = data.phone || '';\n    this.avatar = data.avatar || '';\n    this.role = data.role || 'customer';\n    this.addresses = data.addresses || [];\n    this.defaultAddressId = data.defaultAddressId || null;\n    this.createdAt = data.createdAt ? new Date(data.createdAt) : null;\n    this.updatedAt = data.updatedAt ? new Date(data.updatedAt) : null;\n  }\n\n  // Get full name\n  getFullName() {\n    return `${this.firstName} ${this.lastName}`.trim();\n  }\n\n  // Get default address\n  getDefaultAddress() {\n    if (!this.defaultAddressId || !this.addresses.length) return null;\n    return this.addresses.find(address => address.id === this.defaultAddressId) || this.addresses[0];\n  }\n\n  // Get formatted address\n  getFormattedAddress(addressId = null) {\n    const address = addressId \n      ? this.addresses.find(addr => addr.id === addressId) \n      : this.getDefaultAddress();\n    \n    if (!address) return '';\n    \n    return [\n      address.street,\n      address.ward,\n      address.district,\n      address.city,\n      address.country\n    ].filter(Boolean).join(', ');\n  }\n\n  // Check if user is admin\n  isAdmin() {\n    return this.role === 'admin';\n  }\n\n  // Static methods for API operations\n  static async getCurrentUser() {\n    try {\n      const response = await api.get('/users/me');\n      return new UserModel(response.data);\n    } catch (error) {\n      console.error('Error fetching current user:', error);\n      throw error;\n    }\n  }\n\n  static async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      \n      // Store token in localStorage\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        api.setAuthHeader(response.data.token);\n      }\n      \n      return new UserModel(response.data.user);\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  }\n\n  static async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      \n      // Store token in localStorage if provided\n      if (response.data.token) {\n        localStorage.setItem('auth_token', response.data.token);\n        api.setAuthHeader(response.data.token);\n      }\n      \n      return new UserModel(response.data.user);\n    } catch (error) {\n      console.error('Error during registration:', error);\n      throw error;\n    }\n  }\n\n  static logout() {\n    localStorage.removeItem('auth_token');\n    api.removeAuthHeader();\n  }\n\n  static async updateProfile(userData) {\n    try {\n      const response = await api.put('/users/me', userData);\n      return new UserModel(response.data);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n\n  static async addAddress(addressData) {\n    try {\n      const response = await api.post('/users/me/addresses', addressData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding address:', error);\n      throw error;\n    }\n  }\n\n  static async updateAddress(addressId, addressData) {\n    try {\n      const response = await api.put(`/users/me/addresses/${addressId}`, addressData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating address:', error);\n      throw error;\n    }\n  }\n\n  static async deleteAddress(addressId) {\n    try {\n      await api.delete(`/users/me/addresses/${addressId}`);\n      return true;\n    } catch (error) {\n      console.error('Error deleting address:', error);\n      throw error;\n    }\n  }\n\n  static async setDefaultAddress(addressId) {\n    try {\n      const response = await api.put(`/users/me/addresses/${addressId}/default`);\n      return response.data;\n    } catch (error) {\n      console.error('Error setting default address:', error);\n      throw error;\n    }\n  }\n\n  static async changePassword(currentPassword, newPassword) {\n    try {\n      await api.put('/users/me/password', { currentPassword, newPassword });\n      return true;\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  }\n\n  static async requestPasswordReset(email) {\n    try {\n      await api.post('/auth/forgot-password', { email });\n      return true;\n    } catch (error) {\n      console.error('Error requesting password reset:', error);\n      throw error;\n    }\n  }\n\n  static async resetPassword(token, newPassword) {\n    try {\n      await api.post('/auth/reset-password', { token, newPassword });\n      return true;\n    } catch (error) {\n      console.error('Error resetting password:', error);\n      throw error;\n    }\n  }\n}\n\nexport default UserModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}