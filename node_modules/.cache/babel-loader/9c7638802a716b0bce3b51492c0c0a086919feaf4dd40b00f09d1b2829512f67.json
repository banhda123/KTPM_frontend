{"ast":null,"code":"// AuthController.js - Handles business logic for authentication-related operations\n\nimport UserModel from '../models/UserModel';\nclass AuthController {\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!localStorage.getItem('auth_token');\n  }\n\n  // Login user\n  async login(email, password) {\n    try {\n      // Validate inputs\n      if (!email || !email.trim()) {\n        throw new Error('Email is required');\n      }\n      if (!password || !password.trim()) {\n        throw new Error('Password is required');\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      // Attempt login\n      return await UserModel.login(email, password);\n    } catch (error) {\n      console.error('Error in login:', error);\n\n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 401) {\n          throw new Error('Invalid email or password');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Login failed. Please try again later.');\n    }\n  }\n\n  // Register new user\n  async register(userData) {\n    try {\n      // Validate required fields\n      const requiredFields = ['firstName', 'lastName', 'email', 'password'];\n      for (const field of requiredFields) {\n        if (!userData[field] || !userData[field].trim()) {\n          throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n        }\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      // Validate password strength\n      if (userData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      // Check if passwords match\n      if (userData.password !== userData.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Remove confirmPassword before sending to API\n      const {\n        confirmPassword,\n        ...dataToSend\n      } = userData;\n\n      // Attempt registration\n      return await UserModel.register(dataToSend);\n    } catch (error) {\n      console.error('Error in register:', error);\n\n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 409) {\n          throw new Error('Email already in use');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Registration failed. Please try again later.');\n    }\n  }\n\n  // Logout user\n  logout() {\n    UserModel.logout();\n  }\n\n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      if (!this.isAuthenticated()) {\n        return null;\n      }\n      return await UserModel.getCurrentUser();\n    } catch (error) {\n      console.error('Error in getCurrentUser:', error);\n\n      // If unauthorized, clear token\n      if (error.response && error.response.status === 401) {\n        this.logout();\n      }\n      return null;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      // Validate required fields\n      const requiredFields = ['firstName', 'lastName', 'email'];\n      for (const field of requiredFields) {\n        if (!userData[field] || !userData[field].trim()) {\n          throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n        }\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      // Validate phone format if provided\n      if (userData.phone && !/^[0-9]{10,11}$/.test(userData.phone)) {\n        throw new Error('Please enter a valid phone number');\n      }\n      return await UserModel.updateProfile(userData);\n    } catch (error) {\n      console.error('Error in updateProfile:', error);\n\n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 409) {\n          throw new Error('Email already in use');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Profile update failed. Please try again later.');\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword, confirmPassword) {\n    try {\n      // Validate inputs\n      if (!currentPassword || !currentPassword.trim()) {\n        throw new Error('Current password is required');\n      }\n      if (!newPassword || !newPassword.trim()) {\n        throw new Error('New password is required');\n      }\n      if (newPassword !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Validate password strength\n      if (newPassword.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      return await UserModel.changePassword(currentPassword, newPassword);\n    } catch (error) {\n      console.error('Error in changePassword:', error);\n\n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 401) {\n          throw new Error('Current password is incorrect');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password change failed. Please try again later.');\n    }\n  }\n\n  // Request password reset\n  async requestPasswordReset(email) {\n    try {\n      // Validate email\n      if (!email || !email.trim()) {\n        throw new Error('Email is required');\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      return await UserModel.requestPasswordReset(email);\n    } catch (error) {\n      console.error('Error in requestPasswordReset:', error);\n\n      // Handle specific API errors\n      if (error.response && error.response.data && error.response.data.message) {\n        throw new Error(error.response.data.message);\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password reset request failed. Please try again later.');\n    }\n  }\n\n  // Reset password\n  async resetPassword(token, newPassword, confirmPassword) {\n    try {\n      // Validate inputs\n      if (!token || !token.trim()) {\n        throw new Error('Reset token is required');\n      }\n      if (!newPassword || !newPassword.trim()) {\n        throw new Error('New password is required');\n      }\n      if (newPassword !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n\n      // Validate password strength\n      if (newPassword.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      return await UserModel.resetPassword(token, newPassword);\n    } catch (error) {\n      console.error('Error in resetPassword:', error);\n\n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 400) {\n          throw new Error('Invalid or expired reset token');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n\n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password reset failed. Please try again later.');\n    }\n  }\n}\nexport default new AuthController();","map":{"version":3,"names":["UserModel","AuthController","isAuthenticated","localStorage","getItem","login","email","password","trim","Error","emailRegex","test","error","console","response","status","data","message","register","userData","requiredFields","field","charAt","toUpperCase","slice","length","confirmPassword","dataToSend","logout","getCurrentUser","updateProfile","phone","changePassword","currentPassword","newPassword","requestPasswordReset","resetPassword","token"],"sources":["D:/Kientruc/src/modules/auth/controllers/AuthController.js"],"sourcesContent":["// AuthController.js - Handles business logic for authentication-related operations\n\nimport UserModel from '../models/UserModel';\n\nclass AuthController {\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!localStorage.getItem('auth_token');\n  }\n  \n  // Login user\n  async login(email, password) {\n    try {\n      // Validate inputs\n      if (!email || !email.trim()) {\n        throw new Error('Email is required');\n      }\n      \n      if (!password || !password.trim()) {\n        throw new Error('Password is required');\n      }\n      \n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      \n      // Attempt login\n      return await UserModel.login(email, password);\n    } catch (error) {\n      console.error('Error in login:', error);\n      \n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 401) {\n          throw new Error('Invalid email or password');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Login failed. Please try again later.');\n    }\n  }\n  \n  // Register new user\n  async register(userData) {\n    try {\n      // Validate required fields\n      const requiredFields = ['firstName', 'lastName', 'email', 'password'];\n      for (const field of requiredFields) {\n        if (!userData[field] || !userData[field].trim()) {\n          throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n        }\n      }\n      \n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      \n      // Validate password strength\n      if (userData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      \n      // Check if passwords match\n      if (userData.password !== userData.confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      \n      // Remove confirmPassword before sending to API\n      const { confirmPassword, ...dataToSend } = userData;\n      \n      // Attempt registration\n      return await UserModel.register(dataToSend);\n    } catch (error) {\n      console.error('Error in register:', error);\n      \n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 409) {\n          throw new Error('Email already in use');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Registration failed. Please try again later.');\n    }\n  }\n  \n  // Logout user\n  logout() {\n    UserModel.logout();\n  }\n  \n  // Get current user profile\n  async getCurrentUser() {\n    try {\n      if (!this.isAuthenticated()) {\n        return null;\n      }\n      \n      return await UserModel.getCurrentUser();\n    } catch (error) {\n      console.error('Error in getCurrentUser:', error);\n      \n      // If unauthorized, clear token\n      if (error.response && error.response.status === 401) {\n        this.logout();\n      }\n      \n      return null;\n    }\n  }\n  \n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      // Validate required fields\n      const requiredFields = ['firstName', 'lastName', 'email'];\n      for (const field of requiredFields) {\n        if (!userData[field] || !userData[field].trim()) {\n          throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);\n        }\n      }\n      \n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      \n      // Validate phone format if provided\n      if (userData.phone && !/^[0-9]{10,11}$/.test(userData.phone)) {\n        throw new Error('Please enter a valid phone number');\n      }\n      \n      return await UserModel.updateProfile(userData);\n    } catch (error) {\n      console.error('Error in updateProfile:', error);\n      \n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 409) {\n          throw new Error('Email already in use');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Profile update failed. Please try again later.');\n    }\n  }\n  \n  // Change password\n  async changePassword(currentPassword, newPassword, confirmPassword) {\n    try {\n      // Validate inputs\n      if (!currentPassword || !currentPassword.trim()) {\n        throw new Error('Current password is required');\n      }\n      \n      if (!newPassword || !newPassword.trim()) {\n        throw new Error('New password is required');\n      }\n      \n      if (newPassword !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      \n      // Validate password strength\n      if (newPassword.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      \n      return await UserModel.changePassword(currentPassword, newPassword);\n    } catch (error) {\n      console.error('Error in changePassword:', error);\n      \n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 401) {\n          throw new Error('Current password is incorrect');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password change failed. Please try again later.');\n    }\n  }\n  \n  // Request password reset\n  async requestPasswordReset(email) {\n    try {\n      // Validate email\n      if (!email || !email.trim()) {\n        throw new Error('Email is required');\n      }\n      \n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        throw new Error('Please enter a valid email address');\n      }\n      \n      return await UserModel.requestPasswordReset(email);\n    } catch (error) {\n      console.error('Error in requestPasswordReset:', error);\n      \n      // Handle specific API errors\n      if (error.response && error.response.data && error.response.data.message) {\n        throw new Error(error.response.data.message);\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password reset request failed. Please try again later.');\n    }\n  }\n  \n  // Reset password\n  async resetPassword(token, newPassword, confirmPassword) {\n    try {\n      // Validate inputs\n      if (!token || !token.trim()) {\n        throw new Error('Reset token is required');\n      }\n      \n      if (!newPassword || !newPassword.trim()) {\n        throw new Error('New password is required');\n      }\n      \n      if (newPassword !== confirmPassword) {\n        throw new Error('Passwords do not match');\n      }\n      \n      // Validate password strength\n      if (newPassword.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      \n      return await UserModel.resetPassword(token, newPassword);\n    } catch (error) {\n      console.error('Error in resetPassword:', error);\n      \n      // Handle specific API errors\n      if (error.response) {\n        if (error.response.status === 400) {\n          throw new Error('Invalid or expired reset token');\n        } else if (error.response.data && error.response.data.message) {\n          throw new Error(error.response.data.message);\n        }\n      }\n      \n      // Throw original error if it has a message, otherwise generic error\n      throw error.message ? error : new Error('Password reset failed. Please try again later.');\n    }\n  }\n}\n\nexport default new AuthController();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}