{"ast":null,"code":"// ProductModel.js - Defines the data structure for products and handles data operations\n\nimport { api } from '../../../services/api';\nclass ProductModel {\n  constructor(data = {}) {\n    this.id = data.id || '';\n    this.name = data.name || '';\n    this.price = data.price || 0;\n    this.salePrice = data.salePrice || null;\n    this.description = data.description || '';\n    this.category = data.category || '';\n    this.images = data.images || [];\n    this.stock = data.stock || 0;\n    this.rating = data.rating || 0;\n    this.reviews = data.reviews || [];\n    this.featured = data.featured || false;\n    this.new = data.new || false;\n    this.specifications = data.specifications || {};\n    this.createdAt = data.createdAt || new Date().toISOString();\n    this.updatedAt = data.updatedAt || new Date().toISOString();\n  }\n\n  // Calculate discount percentage\n  getDiscountPercentage() {\n    if (!this.salePrice || this.price <= 0) return 0;\n    return Math.round((this.price - this.salePrice) / this.price * 100);\n  }\n\n  // Check if product is on sale\n  isOnSale() {\n    return this.salePrice !== null && this.salePrice < this.price;\n  }\n\n  // Check if product is in stock\n  isInStock() {\n    return this.stock > 0;\n  }\n\n  // Format price with currency\n  formatPrice(price = this.price) {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND'\n    }).format(price);\n  }\n\n  // Static methods for API operations\n  static async getAll(params = {}) {\n    // try {\n    //   const response = await api.get('/products', { params });\n    //   return response.data.map(product => new ProductModel(product));\n    // } catch (error) {\n    //   console.error('Error fetching products:', error);\n    //   throw error;\n    // }\n    try {\n      const response = await mockApi.getProducts(params);\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  }\n  static async getById(id) {\n    try {\n      const response = await api.get(`/products/${id}`);\n      return new ProductModel(response.data);\n    } catch (error) {\n      console.error(`Error fetching product with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async getByCategory(category, params = {}) {\n    try {\n      const response = await api.get(`/products`, {\n        params: {\n          category,\n          ...params\n        }\n      });\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error(`Error fetching products in category ${category}:`, error);\n      throw error;\n    }\n  }\n  static async search(query, params = {}) {\n    try {\n      const response = await api.get(`/products/search`, {\n        params: {\n          query,\n          ...params\n        }\n      });\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error(`Error searching products with query ${query}:`, error);\n      throw error;\n    }\n  }\n}\nexport default ProductModel;","map":{"version":3,"names":["api","ProductModel","constructor","data","id","name","price","salePrice","description","category","images","stock","rating","reviews","featured","new","specifications","createdAt","Date","toISOString","updatedAt","getDiscountPercentage","Math","round","isOnSale","isInStock","formatPrice","Intl","NumberFormat","style","currency","format","getAll","params","response","mockApi","getProducts","map","product","error","console","getById","get","getByCategory","search","query"],"sources":["D:/Kientruc/src/modules/products/models/ProductModel.js"],"sourcesContent":["// ProductModel.js - Defines the data structure for products and handles data operations\n\nimport { api } from '../../../services/api';\n\nclass ProductModel {\n  constructor(data = {}) {\n    this.id = data.id || '';\n    this.name = data.name || '';\n    this.price = data.price || 0;\n    this.salePrice = data.salePrice || null;\n    this.description = data.description || '';\n    this.category = data.category || '';\n    this.images = data.images || [];\n    this.stock = data.stock || 0;\n    this.rating = data.rating || 0;\n    this.reviews = data.reviews || [];\n    this.featured = data.featured || false;\n    this.new = data.new || false;\n    this.specifications = data.specifications || {};\n    this.createdAt = data.createdAt || new Date().toISOString();\n    this.updatedAt = data.updatedAt || new Date().toISOString();\n  }\n\n  // Calculate discount percentage\n  getDiscountPercentage() {\n    if (!this.salePrice || this.price <= 0) return 0;\n    return Math.round(((this.price - this.salePrice) / this.price) * 100);\n  }\n\n  // Check if product is on sale\n  isOnSale() {\n    return this.salePrice !== null && this.salePrice < this.price;\n  }\n\n  // Check if product is in stock\n  isInStock() {\n    return this.stock > 0;\n  }\n\n  // Format price with currency\n  formatPrice(price = this.price) {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND'\n    }).format(price);\n  }\n\n  // Static methods for API operations\n  static async getAll(params = {}) {\n    // try {\n    //   const response = await api.get('/products', { params });\n    //   return response.data.map(product => new ProductModel(product));\n    // } catch (error) {\n    //   console.error('Error fetching products:', error);\n    //   throw error;\n    // }\n    try {\n      const response = await mockApi.getProducts(params);\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  }\n\n  static async getById(id) {\n    try {\n      const response = await api.get(`/products/${id}`);\n      return new ProductModel(response.data);\n    } catch (error) {\n      console.error(`Error fetching product with id ${id}:`, error);\n      throw error;\n    }\n  }\n\n  static async getByCategory(category, params = {}) {\n    try {\n      const response = await api.get(`/products`, {\n        params: { category, ...params }\n      });\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error(`Error fetching products in category ${category}:`, error);\n      throw error;\n    }\n  }\n\n  static async search(query, params = {}) {\n    try {\n      const response = await api.get(`/products/search`, {\n        params: { query, ...params }\n      });\n      return response.data.map(product => new ProductModel(product));\n    } catch (error) {\n      console.error(`Error searching products with query ${query}:`, error);\n      throw error;\n    }\n  }\n}\n\nexport default ProductModel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}