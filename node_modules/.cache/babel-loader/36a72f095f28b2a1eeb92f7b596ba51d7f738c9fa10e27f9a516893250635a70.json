{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kientruc\\\\src\\\\modules\\\\products\\\\views\\\\TestProductPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../../services/api';\nimport ProductCard from '../components/ProductCard';\nimport LoadingSpinner from '../../../core/components/LoadingSpinner';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n_c = Container;\nconst Title = styled.h1`\n  font-size: 24px;\n  margin-bottom: 20px;\n`;\n_c2 = Title;\nconst ProductGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n`;\n_c3 = ProductGrid;\nconst StatusMessage = styled.div`\n  margin-top: 20px;\n  padding: 15px;\n  background-color: ${props => props.error ? '#ffeeee' : '#eeffee'};\n  border: 1px solid ${props => props.error ? '#ffcccc' : '#ccffcc'};\n  border-radius: 4px;\n`;\n_c4 = StatusMessage;\nconst TestProductPage = () => {\n  _s();\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [testStatus, setTestStatus] = useState(null);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setLoading(true);\n      try {\n        const result = await api.getProducts();\n        console.log('API Response:', result);\n        if (result && result.data) {\n          setProducts(result.data);\n          setTestStatus({\n            success: true,\n            message: `Successfully loaded ${result.data.length} products from the API`\n          });\n        } else {\n          setError('API response does not contain expected data structure');\n          setTestStatus({\n            success: false,\n            message: 'API response format error: missing data property'\n          });\n        }\n      } catch (err) {\n        console.error('Error fetching products:', err);\n        setError('Failed to load products');\n        setTestStatus({\n          success: false,\n          message: `API error: ${err.message || 'Unknown error'}`\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProducts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Product Display Test Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), testStatus && /*#__PURE__*/_jsxDEV(StatusMessage, {\n      error: !testStatus.success,\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Test Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), \" \", testStatus.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(StatusMessage, {\n      error: true,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Displaying \", products.length, \" Products\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProductGrid, {\n        children: products.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: product\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(TestProductPage, \"JVTxENrenr4R3/sr4pjltjVEkZU=\");\n_c5 = TestProductPage;\nexport default TestProductPage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"ProductGrid\");\n$RefreshReg$(_c4, \"StatusMessage\");\n$RefreshReg$(_c5, \"TestProductPage\");","map":{"version":3,"names":["React","useState","useEffect","styled","api","ProductCard","LoadingSpinner","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","Title","h1","_c2","ProductGrid","_c3","StatusMessage","props","error","_c4","TestProductPage","_s","products","setProducts","loading","setLoading","setError","testStatus","setTestStatus","fetchProducts","result","getProducts","console","log","data","success","message","length","err","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","id","_c5","$RefreshReg$"],"sources":["D:/Kientruc/src/modules/products/views/TestProductPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport api from '../../../services/api';\nimport ProductCard from '../components/ProductCard';\nimport LoadingSpinner from '../../../core/components/LoadingSpinner';\n\nconst Container = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nconst Title = styled.h1`\n  font-size: 24px;\n  margin-bottom: 20px;\n`;\n\nconst ProductGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 20px;\n`;\n\nconst StatusMessage = styled.div`\n  margin-top: 20px;\n  padding: 15px;\n  background-color: ${props => props.error ? '#ffeeee' : '#eeffee'};\n  border: 1px solid ${props => props.error ? '#ffcccc' : '#ccffcc'};\n  border-radius: 4px;\n`;\n\nconst TestProductPage = () => {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [testStatus, setTestStatus] = useState(null);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      setLoading(true);\n      try {\n        const result = await api.getProducts();\n        console.log('API Response:', result);\n        \n        if (result && result.data) {\n          setProducts(result.data);\n          setTestStatus({\n            success: true,\n            message: `Successfully loaded ${result.data.length} products from the API`\n          });\n        } else {\n          setError('API response does not contain expected data structure');\n          setTestStatus({\n            success: false,\n            message: 'API response format error: missing data property'\n          });\n        }\n      } catch (err) {\n        console.error('Error fetching products:', err);\n        setError('Failed to load products');\n        setTestStatus({\n          success: false,\n          message: `API error: ${err.message || 'Unknown error'}`\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchProducts();\n  }, []);\n\n  return (\n    <Container>\n      <Title>Product Display Test Page</Title>\n      \n      {testStatus && (\n        <StatusMessage error={!testStatus.success}>\n          <strong>Test Status:</strong> {testStatus.message}\n        </StatusMessage>\n      )}\n      \n      {loading ? (\n        <LoadingSpinner />\n      ) : error ? (\n        <StatusMessage error>{error}</StatusMessage>\n      ) : (\n        <>\n          <h2>Displaying {products.length} Products</h2>\n          <ProductGrid>\n            {products.map(product => (\n              <ProductCard key={product.id} product={product} />\n            ))}\n          </ProductGrid>\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default TestProductPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}